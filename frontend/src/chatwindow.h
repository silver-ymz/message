/**
 * @file chatwindow.h
 * @brief ChatWindow class definition.
 * @details ChatWindow is the main window of the chat client. It contains a
 * QListView to display the messages, a QLineEdit to enter the messages, and a
 * QPushButton to send the messages.
 *
 * @author salvor
 * @date 2023-02-07
 * @version 0.1
 *
 * Copyright (c) 2023 Salvor
 */

#pragma once

#include <QStandardItemModel>
#include <QWidget>
#include <QtCore/qstring.h>
#include <QtNetwork/qabstractsocket.h>

class ChatClient;

/**
 * @brief The ui of ChatWindow.
 * @details The ui of ChatWindow. It is generated by Qt Designer.
 */
namespace Ui { // NOLINT
class ChatWindow;
}

/**
 * @brief ChatWindow class definition.
 * @details ChatWindow is the main window of the chat client. It contains a
 * QListView to display the messages, a QLineEdit to enter the messages, and a
 * QPushButton to send the messages.
 */
class ChatWindow : public QWidget {
    Q_OBJECT

  public:
    /**
     * @brief Constructor of ChatWindow.
     * @details Constructor of ChatWindow, create a QListView to display the
     * messages, a QLineEdit to enter the messages, and a QPushButton to send
     * the messages. It also create a ChatClient object to connect to the
     * server.
     *
     * @param parent The parent widget.
     */
    explicit ChatWindow(QWidget *parent = nullptr);
    /**
     * @brief Destructor of ChatWindow.
     * @details Destructor of ChatWindow, delete the QListView, the QLineEdit,
     * the QPushButton, and the ChatClient object.
     */
    ~ChatWindow() override;

  private slots:
    /**
     * @brief Send the message.
     * @details Send the message to the server.
     */
    void sendMessage();
    /**
     * @brief Connected to the server.
     * @details Connected to the server, enable the QLineEdit and the
     * QPushButton, and send a login request to the server.
     */
    void connected();
    /**
     * @brief Disconnected from the server.
     * @details Disconnected from the server, disable the QLineEdit and the
     * QPushButton, and clear the QListView.
     */
    void disconnected();
    /**
     * @brief Error occurred.
     * @details Error occurred, disable the QLineEdit and the QPushButton, and
     * clear the QListView. It also show a QMessageBox to tell the user the
     * error.
     *
     * @param socket_error The error code.
     */
    void error(QAbstractSocket::SocketError socket_error);
    /**
     * @brief Message received.
     * @details Message received, add print the message to the QListView.
     *
     * @param sender The sender of the message.
     * @param message The message.
     */
    void messageReceived(const QString &sender, const QString &message);
    /**
     * @brief User list received.
     * @details User list received, add the users to the QListView.
     *
     * @param user_list The user list.
     */
    void userListReceived(const QStringList &user_list);
    /**
     * @brief Attempt to connect to the server.
     * @details Attempt to connect to the server, and then use the
     * attemptLogin() function to login.
     */
    void attemptConnection();
    /**
     * @brief Attempt to login to the server.
     * @details Attempt to login to the server, and then use the
     * ChatClient::login() function to login.
     */
    void attemptLogin();
    /**
     * @brief Login successful.
     * @details Login successful, enable the QLineEdit and the QPushButton,
     * and send a request to get the user list.
     */
    void loggedIn();
    /**
     * @brief Login failed.
     * @details Login failed, disable the QLineEdit and the QPushButton, and
     * clear the QListView. It also show a QMessageBox to tell the user the
     * error.
     *
     * @param reason The reason of the error.
     */
    void loginError(const QString &reason);
    /**
     * @brief User joined.
     * @details User joined, print a message to the QListView.
     *
     * @param username The username of the user that joined.
     */
    void userJoined(const QString &username);
    /**
     * @brief User left.
     * @details User left, print a message to the QListView.
     *
     * @param username The username of the user that left.
     */
    void userLeft(const QString &username);

  private:
    /**
     * @brief The UI of the ChatWindow.
     */
    Ui::ChatWindow *ui_;
    /**
     * @brief The ChatClient object.
     */
    ChatClient *chat_client_;
    /**
     * @brief The model of the QListView.
     */
    QStandardItemModel *chat_model_;
    /**
     * @brief The username of the user.
     */
    QString user_name_;
    /**
     * @brief The last user that sent a message.
     */
    QString last_user_;
};
